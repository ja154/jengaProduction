import { NextResponse } from "next/server";
import OpenAI from "openai";

// Define the structure of the incoming request
interface JengaPromptsInput {
  corePromptIdea: string; // The user's main prompt input
  promptMode: 'Text' | 'Image' | 'Video' | 'Audio' | 'Code'; // The selected prompt mode
  modifiers: {
    contentTone?: string; // Tone of the content
    outputFormat?: string; // Format of the output (e.g., JSON, text)
    style?: string; // Artistic style for images
    aspectRatio?: string; // Aspect ratio for images
    lighting?: string; // Lighting conditions for images
    framing?: string; // Framing perspective for images
    cameraAngle?: string; // Camera angle for images
    detailLevel?: string; // Level of detail for images or videos
    audioType?: string; // Type of audio
    vibeMood?: string; // Mood for audio
    language?: string; // Programming language for code prompts
    task?: string; // The task to be performed in code prompts
  };
  outputStructure: 'Descriptive Paragraph' | 'Simple JSON' | 'Detailed JSON'; // The format for output structure
}

interface JengaPromptsOutput {
  primaryResult: string; // The main enhanced prompt output
  structuredJSON?: Record<string, any>; // Optional structured JSON if requested
  errorMessage?: string; // Error message if an error occurs
}

// Initialize OpenAI with API key from environment variable
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Function to call OpenAI API and process the response
async function callOpenAI(data: JengaPromptsInput): Promise<JengaPromptsOutput> {
  console.log("Calling OpenAI API with data:", JSON.stringify(data));

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "user",
          content: `Enhance the following prompt according to the selected mode:
          Core Idea: "${data.corePromptIdea}"
          Prompt Mode: "${data.promptMode}"
          Modifiers: ${JSON.stringify(data.modifiers)}
          
          Please provide the output in the following structure: ${data.outputStructure}`,
        },
      ],
      tools: [
        {
          type: "function",
          function: {
            name: "enhance_prompt",
            description: "Enhance the given prompt based on user inputs and modifiers",
            parameters: {
              type: "object",
              properties: {
                enhancedPrompt: {
                  type: "string",
                  description: "The enhanced prompt generated by the model",
                },
                additionalInfo: {
                  type: "object",
                  description: "Any additional structured information if requested",
                },
              },
              required: ["enhancedPrompt"],
            },
          },
        },
      ],
      tool_choice: {"type": "function", "function": {"name": "enhance_prompt"}},
    });

    console.log("Received response from OpenAI API:", JSON.stringify(response));

    const toolCalls = response.choices[0].message.tool_calls;
    if (toolCalls && toolCalls[0].function.name === "enhance_prompt") {
      const output = JSON.parse(toolCalls[0].function.arguments);
      console.log("Parsed OpenAI response output:", JSON.stringify(output));
      return {
        primaryResult: output.enhancedPrompt,
        structuredJSON: output.additionalInfo,
      };
    }

    // Fallback for cases where the model returns a message directly
    if (response.choices[0].message.content) {
      return {
        primaryResult: response.choices[0].message.content,
      };
    }

    throw new Error("Unexpected response structure from OpenAI API");
  } catch (error) {
    console.error("Error while calling OpenAI API:", error);
    throw error;
  }
}

export async function POST(req: Request) {
  console.log("Received POST request");

  try {
    // Parse and validate the incoming JSON request body
    const data: JengaPromptsInput = await req.json();
    console.log("Parsed request data:", JSON.stringify(data));

    // Validate that the selected output format is supported
    if (!["Descriptive Paragraph", "Simple JSON", "Detailed JSON"].includes(data.outputStructure)) {
      throw new Error("Invalid output structure selected.");
    }

    // Validate prompt modes and adjust modifiers accordingly
    if (data.promptMode === 'Image') {
      if (!data.modifiers.style || !data.modifiers.aspectRatio) {
        throw new Error("Style and Aspect Ratio are required for Image mode.");
      }
    }

    // Call OpenAI API to get the enhanced prompt
    const result = await callOpenAI(data);
    console.log("Prompt enhancement completed successfully");

    // Return the structured response
    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    console.error("Error in POST handler:", error);
    return NextResponse.json(
      {
        error: "Failed to enhance prompt.",
        details: error instanceof Error ? error.message : String(error),
      },
      { status: 500 },
    );
  }
}